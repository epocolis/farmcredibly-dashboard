# AUTOGENERATED! DO NOT EDIT! File to edit: 00_wholesale_price_analytics.ipynb (unless otherwise specified).

__all__ = ['create_header', 'remove_empty_items', 'remove_surrounding_spaces_from_items', 'get_data', 'write_to_csv',
           'get_report_date', 'run', 'main']

# Cell
import pandas as pd
from fastcore.script import *

# Cell
import PyPDF2
import pdftotext
import pandas as pd
import os

# Cell
def create_header(pdftotext_lines:list):
    header_index = 4
    header = pdftotext_lines[header_index].split()
    temp = header[3:]
    temp[0:] = [header[0]]
    temp.insert(1, "Variety source")
    temp[2:]  = [header[4]+ " " + header[5]]
    temp[3:]  = [header[6]+ " " + header[7]]
    temp[4:]  = [header[8]+ " " + header[9] + " " + header[10]]
    return temp

# Cell
def remove_empty_items(lst:list):
    return list(filter(lambda item: len(item.lstrip()) > 0,  lst) )


# Cell
def remove_surrounding_spaces_from_items(lst:list):
    return list(map(lambda item: item.lstrip(),  lst) )

# Cell
def get_data(pdftotext_lines:list):
    data = []
    lines = pdftotext_lines[9:]
    for line in lines:
        if  "Prepared" in line:
            continue
        if "Commodity" in line:
            continue
        if "Ministry" in line:
            continue
        if "Kingston" in line:
            continue
        if "Commerce" in line:
            continue
        if "Week" in line:
            continue
        if "Fisheries" in line:
            continue
        d = remove_empty_items(line.split('   '))
        d = remove_surrounding_spaces_from_items(d)
        data.append(d)


    return data


# Cell
def write_to_csv(data, report_date,  output_directory):

    output_dir = f"{output_directory}/{report_date}"
    try:
        os.mkdir(output_dir)
    except OSError as error:
        print(f"{output_dir} already exists,not recreating")

    df = pd.DataFrame(data)
    out = f"{output_dir}/kingston_supermarket_prices_{report_date}.csv"
    print(f"writing data to: {out}")
    df.to_csv(out,sep="|" ,index=False, header=False)


# Cell
def get_report_date(pdftotext_lines:list):
    date = pdftotext_lines[2]
    date = date.replace("Week","")
    date = date.replace("Ending","").replace("\n","").lower().lstrip().replace(" ","_").replace(",","")
    return date

# Cell
def run(input_path:str, output_directory = "."):
    with open(input_path, 'rb') as file:
        pdf_text = pdftotext.PDF(file)
        pdf_text_lines = ("\n\n".join(pdf_text).splitlines())
        pdftotext_lines = [ln for ln in  pdf_text_lines if ln]
        report_date = get_report_date(pdftotext_lines)
        print(report_date.lstrip())
        header =  create_header(pdftotext_lines)
        data = get_data(pdftotext_lines)
        data[:0] =[header]
        write_to_csv(data, report_date, output_directory)



# Cell
@call_parse
def main(input_path:Param("The urban municipal prices file path", str),
         output_folder:Param("where the converted file should be written", str),
      ):
    "Clean up the input file and generates individual parish farm gate prices in the specified output folder"
    print(f"input path:{input_path}")
    run(input_path, output_folder)
